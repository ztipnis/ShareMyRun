//
//  RunStyleKit.swift
//  ShareMyRun
//
//  Created by Zachary Tipnis on 1/9/16.
//  Copyright (c) 2016 Zachal LLC. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class RunStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var color: UIColor = UIColor(red: 0.023, green: 0.821, blue: 0.401, alpha: 1.000)
        static var color2: UIColor = UIColor(red: 0.000, green: 0.503, blue: 0.805, alpha: 1.000)
        static var gradient2Color: UIColor = UIColor(red: 0.109, green: 0.666, blue: 1.000, alpha: 1.000)
        static var gradient: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [RunStyleKit.color.CGColor, RunStyleKit.color.blendedColorWithFraction(0.5, ofColor: UIColor.greenColor()).CGColor, UIColor.greenColor().CGColor], [0, 0.93, 1])!
        static var gradient2: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [RunStyleKit.color2.CGColor, RunStyleKit.color2.blendedColorWithFraction(0.5, ofColor: RunStyleKit.gradient2Color).CGColor, RunStyleKit.gradient2Color.CGColor], [0, 0.84, 1])!
        static var shadow: NSShadow = NSShadow(color: UIColor.blackColor(), offset: CGSizeMake(3.1, 3.1), blurRadius: 5)
    }

    //// Colors

    public class var color: UIColor { return Cache.color }
    public class var color2: UIColor { return Cache.color2 }
    public class var gradient2Color: UIColor { return Cache.gradient2Color }

    //// Gradients

    public class var gradient: CGGradient { return Cache.gradient }
    public class var gradient2: CGGradient { return Cache.gradient2 }

    //// Shadows

    public class var shadow: NSShadow { return Cache.shadow }

    //// Drawing Methods

    public class func drawStartButton(rect: CGRect) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        CGContextSaveGState(context)
        //CGContextScaleCTM(context, 0.8, 0.8)

        let rectangleRect = CGRectMake(0,0, /*rect.width * 0.95*/100, /*rect.height * 0.95*/25) //CGRectMake(0, 0, 100, 25)
        CGContextScaleCTM(context, (rect.width / 110), (rect.height / 35))
        let rectanglePath = UIBezierPath(roundedRect: rectangleRect, cornerRadius: 5)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, RunStyleKit.shadow.shadowOffset, RunStyleKit.shadow.shadowBlurRadius, (RunStyleKit.shadow.shadowColor as! UIColor).CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        rectanglePath.addClip()
        //CGContextDrawLinearGradient(context, RunStyleKit.gradient, CGPointMake(50, -0), CGPointMake(50, 25), 0)
        CGContextDrawLinearGradient(context, RunStyleKit.gradient, CGPointMake(50, -0), CGPointMake(50, 25), CGGradientDrawingOptions.DrawsBeforeStartLocation)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        let rectangleTextContent = NSString(string: "Start a Run")
        let rectangleStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        rectangleStyle.alignment = NSTextAlignment.Center

        let rectangleFontAttributes = [NSFontAttributeName: UIFont.boldSystemFontOfSize(UIFont.systemFontSize()), NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: rectangleStyle]

        let rectangleTextHeight: CGFloat = rectangleTextContent.boundingRectWithSize(CGSizeMake(rectangleRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: rectangleFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectangleRect);
        rectangleTextContent.drawInRect(CGRectMake(rectangleRect.minX, rectangleRect.minY + (rectangleRect.height - rectangleTextHeight) / 2, rectangleRect.width, rectangleTextHeight), withAttributes: rectangleFontAttributes)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)
    }

    public class func drawPastRuns(rect: CGRect) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        CGContextSaveGState(context)
        //CGContextScaleCTM(context, 0.8, 0.8)

        let rectangleRect = CGRectMake(0, 0, 100, 25)
        CGContextScaleCTM(context, (rect.width / 110), (rect.height / 35))
        let rectanglePath = UIBezierPath(roundedRect: rectangleRect, cornerRadius: 5)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, RunStyleKit.shadow.shadowOffset, RunStyleKit.shadow.shadowBlurRadius, (RunStyleKit.shadow.shadowColor as! UIColor).CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        rectanglePath.addClip()
        CGContextDrawLinearGradient(context, RunStyleKit.gradient2, CGPointMake(50, -0), CGPointMake(50, 25), CGGradientDrawingOptions.DrawsBeforeStartLocation)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        let rectangleTextContent = NSString(string: "View Past Runs")
        let rectangleStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        rectangleStyle.alignment = NSTextAlignment.Center

        let rectangleFontAttributes = [NSFontAttributeName: UIFont.boldSystemFontOfSize(13), NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: rectangleStyle]

        let rectangleTextHeight: CGFloat = rectangleTextContent.boundingRectWithSize(CGSizeMake(rectangleRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: rectangleFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectangleRect);
        rectangleTextContent.drawInRect(CGRectMake(rectangleRect.minX, rectangleRect.minY + (rectangleRect.height - rectangleTextHeight) / 2, rectangleRect.width, rectangleTextHeight), withAttributes: rectangleFontAttributes)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)
    }

    public class func drawNearbyRuns(rect: CGRect) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextScaleCTM(context, (rect.width / 110), (rect.height / 35))
        //CGContextScaleCTM(context, 0.8, 0.8)

        let rectangleRect = CGRectMake(0, 0, 100, 25)
        let rectanglePath = UIBezierPath(roundedRect: rectangleRect, cornerRadius: 5)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, RunStyleKit.shadow.shadowOffset, RunStyleKit.shadow.shadowBlurRadius, (RunStyleKit.shadow.shadowColor as! UIColor).CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        rectanglePath.addClip()
        CGContextDrawLinearGradient(context, RunStyleKit.gradient2, CGPointMake(50, -0), CGPointMake(50, 25), CGGradientDrawingOptions.DrawsBeforeStartLocation)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        let rectangleTextContent = NSString(string: "Nearby Runs")
        let rectangleStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        rectangleStyle.alignment = NSTextAlignment.Center

        let rectangleFontAttributes = [NSFontAttributeName: UIFont.boldSystemFontOfSize(UIFont.systemFontSize()), NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: rectangleStyle]

        let rectangleTextHeight: CGFloat = rectangleTextContent.boundingRectWithSize(CGSizeMake(rectangleRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: rectangleFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectangleRect);
        rectangleTextContent.drawInRect(CGRectMake(rectangleRect.minX, rectangleRect.minY + (rectangleRect.height - rectangleTextHeight) / 2, rectangleRect.width, rectangleTextHeight), withAttributes: rectangleFontAttributes)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)
    }

}



extension UIColor {
    func blendedColorWithFraction(fraction: CGFloat, ofColor color: UIColor) -> UIColor {
        var r1: CGFloat = 1.0, g1: CGFloat = 1.0, b1: CGFloat = 1.0, a1: CGFloat = 1.0
        var r2: CGFloat = 1.0, g2: CGFloat = 1.0, b2: CGFloat = 1.0, a2: CGFloat = 1.0

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
